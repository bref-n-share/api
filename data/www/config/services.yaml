imports:
    - { resource: 'services_repository.yml' }
    - { resource: 'services_infrastructure.yml' }

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Domain,Infrastructure,DependencyInjection,Tests,Kernel.php}'

    App\Domain\:
        resource: '../src/Domain/*'

    App\Infrastructure\:
        resource: '../src/Infrastructure/*'
        exclude: '../src/Infrastructure/{Entity,Migrations,DataFixtures}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Application\Controller\:
        resource: '../src/Application/Controller'
        tags: ['controller.service_arguments']

    App\Domain\User\Manager\Security\SecurityManager:
        arguments:
            $passwordEncoder: '@App\Domain\User\Encoder\PasswordEncoderInterface'

    App\Domain\User\Manager\MemberManager:
        arguments:
            $workflowProcessor: '@user.workflow.member'
        tags: ['user.manager']

    App\Domain\User\Manager\DonorManager:
        arguments:
            $workflowProcessor: '@user.workflow.donor'
        tags: ['user.manager']

    App\Domain\Structure\Manager\SiteManager:
        arguments:
            $repository: '@App\Domain\Structure\Repository\SiteRepositoryInterface'
            $workflowProcessor: '@structure.workflow.site'
        tags: ['structure.manager']

    App\Domain\Structure\Manager\OrganizationManager:
        arguments:
            $repository: '@App\Domain\Structure\Repository\OrganizationRepositoryInterface'
            $workflowProcessor: '@structure.workflow.organization'
        tags: ['structure.manager']

    App\Domain\Post\Manager\RequestManager:
            arguments:
                $repository: '@App\Domain\Post\Repository\RequestRepository'
                $workflowProcessor: '@post.workflow'

    App\Domain\Post\Manager\InformationManager:
            arguments:
                $repository: '@App\Domain\Post\Repository\InformationRepository'
                $workflowProcessor: '@post.workflow'

    App\Domain\Post\Manager\PostManager:
            arguments:
                $repository: '@App\Domain\Post\Repository\PostRepository'
                $workflowProcessor: '@post.workflow'

    App\Domain\Structure\Manager\StructureManagerChain:
        arguments:
            $managers: !tagged structure.manager

    App\Domain\User\Manager\UserManagerChain:
        arguments:
            $managers: !tagged user.manager

    App\Domain\Post\Notification\PostNotificationProcessorChain:
        arguments:
            $processors: !tagged notification_post.processor

    App\Domain\Core\Notification\CustomNotificationProcessorChain:
        arguments:
            $processors: !tagged notification_custom.processor
